use crate::util::RunningProcess;
use color_eyre::eyre::Result;
use glob::glob;
use std::net::SocketAddr;
use std::path::PathBuf;

pub(crate) async fn build_wasm(wasm_deploy_path: PathBuf) -> Result<()> {
    use tokio::process::Command;

    let cwd = std::env::current_dir()?;

    if cfg!(feature = "proteus") {
        let spinner = RunningProcess::new("Building Cryptobox ESM bundle...", false);

        Command::new("bun")
            .args(["install"])
            .current_dir(cwd.join("interop/src/build/web/cryptobox-esm"))
            .stdout(std::process::Stdio::null())
            .stderr(std::process::Stdio::null())
            .status()
            .await?;

        Command::new("bun")
            .args(["run", "build"])
            .current_dir(cwd.join("interop/src/build/web/cryptobox-esm"))
            .stdout(std::process::Stdio::null())
            .stderr(std::process::Stdio::null())
            .status()
            .await?;

        spinner.success("Cryptobox ESM bundle [OK]");
    }

    let spinner = RunningProcess::new("Determining whether to build wasm...", false);

    let wasm_modification_time = std::fs::metadata("crypto-ffi/bindings/js/src/autogenerated/core-crypto-ffi_bg.wasm")
        .and_then(|metadata| metadata.modified())
        .ok();
    let last_relevant_mtime = glob("crypto/**/*.rs")?
        .chain(glob("crypto-ffi/**/*.rs")?)
        .filter_map(Result::ok)
        .chain(
            ["Cargo.lock", "crypto/Cargo.toml", "crypto-ffi/Cargo.toml"]
                .into_iter()
                .map(PathBuf::from),
        )
        .filter_map(|path| std::fs::metadata(path).ok()?.modified().ok())
        .max();

    spinner.success("WASM build check [OK]");

    let need_to_build_wasm = wasm_modification_time
        .zip(last_relevant_mtime)
        .map(|(wasm, last_input)| last_input >= wasm)
        // if we couldn't read or find any of the input files, we need a rebuild
        .unwrap_or(false);
    if need_to_build_wasm {
        let spinner = RunningProcess::new("Building WASM bundle...", false);

        Command::new("cargo")
            .args(["make", "wasm"])
            .current_dir(cwd.join("crypto-ffi"))
            .stdout(std::process::Stdio::null())
            .stderr(std::process::Stdio::null())
            .status()
            .await?;

        spinner.success("Building WASM [OK]");
    }

    let need_to_build_bun = need_to_build_wasm || {
        let spinner = RunningProcess::new("Determining whether to build JS...", false);

        let js_modification_time = std::fs::metadata("crypto-ffi/bindings/js/src/corecrypto.js")
            .and_then(|metadata| metadata.modified())
            .ok();

        let last_relevant_mtime = glob("crypto-ffi/bindings/js/**/*.ts")?
            .filter_map(Result::ok)
            .filter_map(|path| std::fs::metadata(path).ok()?.modified().ok())
            .max();

        let outdated_ts = js_modification_time
            .zip(last_relevant_mtime)
            .map(|(js, last_input)| last_input >= js)
            // if we couldn't read or find any of the input files, we need a rebuild
            .unwrap_or(true);

        spinner.success("JS build check [OK]");

        outdated_ts
    };

    if need_to_build_bun {
        let spinner = RunningProcess::new("Bundling TS sources...", false);

        Command::new("bun")
            .args(["run", "build"])
            .current_dir(cwd.join("crypto-ffi/bindings/js"))
            .stdout(std::process::Stdio::null())
            .stderr(std::process::Stdio::null())
            .status()
            .await?;

        spinner.success("Bundling TS [OK]");
    }

    let spinner = RunningProcess::new("Copying data into WASM bundle...", false);

    std::fs::copy(
        cwd.join("crypto-ffi/bindings/js/test/wdio/index.html"),
        wasm_deploy_path.join("index.html"),
    )?;

    std::fs::copy(
        cwd.join("crypto-ffi/bindings/js/src/corecrypto.js"),
        wasm_deploy_path.join("corecrypto.js"),
    )?;

    std::fs::copy(
        cwd.join("crypto-ffi/bindings/js/src/corecrypto.d.ts"),
        wasm_deploy_path.join("corecrypto.d.ts"),
    )?;

    std::fs::create_dir(wasm_deploy_path.join("autogenerated"))?;
    std::fs::copy(
        cwd.join("crypto-ffi/bindings/js/src/autogenerated/core-crypto-ffi_bg.wasm"),
        wasm_deploy_path.join("autogenerated/core-crypto-ffi_bg.wasm"),
    )?;

    spinner.success("WASM bundle [OK]");
    Ok(())
}

pub(crate) fn bind_http_server(wasm_deploy_path: PathBuf) -> (SocketAddr, impl Future<Output = ()> + 'static) {
    use warp::Filter as _;
    let warp_filter_cc = warp::path("core-crypto").and(warp::fs::dir(wasm_deploy_path));
    let warp_filter_cbox =
        warp::path("cryptobox").and(warp::fs::dir("interop/src/build/web/cryptobox-esm/dist".to_string()));

    warp::serve(warp_filter_cc.or(warp_filter_cbox).boxed()).bind_ephemeral(([0, 0, 0, 0], 0))
}
